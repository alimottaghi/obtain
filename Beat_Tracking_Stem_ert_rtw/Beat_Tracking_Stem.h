//===================================================================//
//   Beat Tracking Alogrithm                                         //
//   Implemented on Software for Microsoft® Windows®                 //
//                                                                   //
//   Team of Sharif University of Technology - IRAN                  //
//                                                                   //
//   IEEE Signal Processing Cup 2017 - Beat Tracking Challenge       //
//                                                                   //
//   Please read the associated documentation on the procedure of    //
//   building the source code into executable app package and also   //
//   the installation.                                               //
//===================================================================//
//Notice: This file is autogenerated from a Simulink model
//  Parts marked with !@! are altered to meet requirements of the
//  GUI app.

/*
 * File: Beat_Tracking_Stem.h
 *
 * Code generated for Simulink model 'Beat_Tracking_Stem'.
 *
 * Model version                  : 1.83
 * Simulink Coder version         : 8.10 (R2016a) 10-Feb-2016
 * C/C++ source code generated on : Mon Jan 02 19:30:47 2017
 *
 * Target selection: ert.tlc
 * Embedded hardware selection: Intel->x86-64 (Windows64)
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#ifndef RTW_HEADER_Beat_Tracking_Stem_h_
#define RTW_HEADER_Beat_Tracking_Stem_h_
#include <stddef.h>
#include <math.h>
#include <string.h>
#include <float.h>
#ifndef Beat_Tracking_Stem_COMMON_INCLUDES_
# define Beat_Tracking_Stem_COMMON_INCLUDES_
#include "rtwtypes.h"
//!@!
//#include "rt_logging.h"
//#include "HostLib_MMFile.h"
//#include "HostLib_Multimedia.h"
//#include "HostLib_Audio.h"
#endif                                 /* Beat_Tracking_Stem_COMMON_INCLUDES_ */

#include "Beat_Tracking_Stem_types.h"

//The interface between the Beat Tracking DSP and the GUI app.
#include "AlgorithmInterface.h"

/* Shared type includes */
#include "multiword_types.h"
#include "rt_nonfinite.h"
#include "rtGetInf.h"

/* Macros for accessing real-time model data structure */
#ifndef rtmGetFinalTime
# define rtmGetFinalTime(rtm)          ((rtm)->Timing.tFinal)
#endif

#ifndef rtmGetErrorStatus
# define rtmGetErrorStatus(rtm)        ((rtm)->errorStatus)
#endif

#ifndef rtmSetErrorStatus
# define rtmSetErrorStatus(rtm, val)   ((rtm)->errorStatus = (val))
#endif

#ifndef rtmGetStopRequested
# define rtmGetStopRequested(rtm)      ((rtm)->Timing.stopRequestedFlag)
#endif

#ifndef rtmSetStopRequested
# define rtmSetStopRequested(rtm, val) ((rtm)->Timing.stopRequestedFlag = (val))
#endif

#ifndef rtmGetStopRequestedPtr
# define rtmGetStopRequestedPtr(rtm)   (&((rtm)->Timing.stopRequestedFlag))
#endif

#ifndef rtmGetT
# define rtmGetT(rtm)                  ((rtm)->Timing.taskTime0)
#endif

#ifndef rtmGetTFinal
# define rtmGetTFinal(rtm)             ((rtm)->Timing.tFinal)
#endif

/* Block signals (auto storage) */
typedef struct {
  real_T LMS[67650];
  real_T LMS_data[67650];
  real_T Ptrain_data[10500];
  real_T PtrainShifted_data[10500];
  real_T b_Ptrain_data[10500];
  real_T tmp_data[10479];
  creal_T dcv0[4096];
  creal_T dcv1[4096];
  real_T buffer_data[5250];
  real_T scaled[4096];
  real_T a[4096];
  real_T detrended[2255];
  real_T stretched[2048];
  real_T OSSBuffer[2048];              /* '<Root>/OSS Buffer' */
  real_T detrended_m[2048];
  real_T CBSS_data[2048];
  real_T CBSS[2048];
  creal_T dcv2[1024];
  creal_T b_y1[1024];
  real_T pdf[2000];
  real_T FromMultimediaFile[1024];     /* '<Root>/From Multimedia File' */
  real_T AudioFrameBuffer[1024];       /* '<Root>/Audio Frame Buffer' */
  real_T hamm[1024];
  real_T win[1000];
  real_T wcumscore_data[1000];
  int32_T b_ixstart_data[2000];
  real_T logmag[513];                  /* '<Root>/Flux Calculation' */
  real_T beatDetected;                 /* '<Root>/PeakDetection' */
  real_T beatPeriodOverall;            /* '<Root>/Overall Beat Period Estimation' */
  real_T oss;                          /* '<Root>/OSS Calculation' */
  real_T newCbss[2048];                /* '<Root>/CBSS Calculation' */
  real_T diff[513];
  real_T beatPeriod;                   /* '<Root>/Beat Period Estimation' */
} B_Beat_Tracking_Stem_T;

/* Block states (auto storage) for system '<Root>' */
typedef struct {
  real_T AudioFrameBuffer_CircBuf[2048];/* '<Root>/Audio Frame Buffer' */
  real_T FluxBuffer_CircBuff[14];      /* '<Root>/Flux Buffer' */
  real_T OSSBuffer_CircBuf[4096];      /* '<Root>/OSS Buffer' */
  real_T BeatPeriodBuffer_CircBuff[99];/* '<Root>/Beat Period Buffer' */
  real_T FromMultimediaFile_HostLib[137];/* '<Root>/From Multimedia File' */
  real_T FromMultimediaFile_AudioInfo[5];/* '<Root>/From Multimedia File' */
  real_T FromMultimediaFile_VideoInfo[11];/* '<Root>/From Multimedia File' */
  real_T logmagMemory_PreviousInput[513];/* '<Root>/logmag Memory' */
  real_T Flag_PreviousInput;           /* '<Root>/Flag' */
  real_T TempoMemory_PreviousInput[20];/* '<Root>/Tempo Memory' */
  real_T Counter2Memory_PreviousInput; /* '<Root>/Counter2 Memory' */
  real_T CumulativeScoreMemory_PreviousI[2048];/* '<Root>/Cumulative Score Memory' */
  real_T BeatsLocationMemory_PreviousInp[2048];/* '<Root>/Beats Location Memory' */
  real_T LastBeatMemory_PreviousInput; /* '<Root>/Last Beat Memory' */
  real_T test_PreviousInput;           /* '<Root>/test' */
  struct {
    void *LoggedData;
  } BeatDetectedToWorkspace_PWORK;     /* '<Root>/Beat Detected To Workspace' */

  struct {
    void *LoggedData;
  } BeatPeriodOverallToWorkspace_PW;   /* '<Root>/Beat Period Overall To Workspace' */

  struct {
    void *LoggedData;
  } BeatPeriodToWorkspace_PWORK;       /* '<Root>/Beat Period To Workspace' */

  struct {
    void *LoggedData;
  } CBSSToWorkspace_PWORK;             /* '<Root>/CBSS To Workspace' */

  struct {
    void *LoggedData[2];
  } CumulativeBaetStrengthSignal_PW;   /* '<Root>/Cumulative Baet Strength Signal' */

  struct {
    void *LoggedData;
  } OSSToWorkspace_PWORK;              /* '<Root>/OSS To Workspace' */

  int32_T AudioFrameBuffer_inBufPtrIdx;/* '<Root>/Audio Frame Buffer' */
  int32_T AudioFrameBuffer_outBufPtrIdx;/* '<Root>/Audio Frame Buffer' */
  int32_T AudioFrameBuffer_bufferLength;/* '<Root>/Audio Frame Buffer' */
  int32_T FluxBuffer_CircBufIdx;       /* '<Root>/Flux Buffer' */
  int32_T OSSBuffer_inBufPtrIdx;       /* '<Root>/OSS Buffer' */
  int32_T OSSBuffer_outBufPtrIdx;      /* '<Root>/OSS Buffer' */
  int32_T OSSBuffer_bufferLength;      /* '<Root>/OSS Buffer' */
  int32_T BeatPeriodBuffer_CircBufIdx; /* '<Root>/Beat Period Buffer' */
  uint32_T state[625];                 /* '<Root>/PeakDetection' */
  uint8_T ToAudioDevice_AudioDeviceLib[1096];/* '<Root>/To Audio Device' */
} DW_Beat_Tracking_Stem_T;

/* Real-time Model Data Structure */
struct tag_RTM_Beat_Tracking_Stem_T {
  const char_T *errorStatus;
  RTWLogInfo *rtwLogInfo;

  /*
   * Timing:
   * The following substructure contains information regarding
   * the timing information for the model.
   */
  struct {
    time_T taskTime0;
    uint32_T clockTick0;
    time_T stepSize0;
    uint32_T clockTick2;
    struct {
      uint16_T TID[3];
    } TaskCounters;

    time_T tFinal;
    boolean_T stopRequestedFlag;
  } Timing;
};

/* Block signals (auto storage) */
extern B_Beat_Tracking_Stem_T Beat_Tracking_Stem_B;

/* Block states (auto storage) */
extern DW_Beat_Tracking_Stem_T Beat_Tracking_Stem_DW;

/* Model entry point functions */
extern void Beat_Tracking_Stem_initialize(void);
extern void Beat_Tracking_Stem_step(void);
extern void Beat_Tracking_Stem_terminate(void);

/* Real-time Model object */
extern RT_MODEL_Beat_Tracking_Stem_T *const Beat_Tracking_Stem_M;

/*-
 * The generated code includes comments that allow you to trace directly
 * back to the appropriate location in the model.  The basic format
 * is <system>/block_name, where system is the system number (uniquely
 * assigned by Simulink) and block_name is the name of the block.
 *
 * Use the MATLAB hilite_system command to trace the generated code back
 * to the model.  For example,
 *
 * hilite_system('<S3>')    - opens system 3
 * hilite_system('<S3>/Kp') - opens and selects block Kp which resides in S3
 *
 * Here is the system hierarchy for this model
 *
 * '<Root>' : 'Beat_Tracking_Stem'
 * '<S1>'   : 'Beat_Tracking_Stem/Beat Period Estimation'
 * '<S2>'   : 'Beat_Tracking_Stem/CBSS Calculation'
 * '<S3>'   : 'Beat_Tracking_Stem/Flux Calculation'
 * '<S4>'   : 'Beat_Tracking_Stem/OSS Calculation'
 * '<S5>'   : 'Beat_Tracking_Stem/Overall Beat Period Estimation'
 * '<S6>'   : 'Beat_Tracking_Stem/PeakDetection'
 */
#endif                                 /* RTW_HEADER_Beat_Tracking_Stem_h_ */

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
