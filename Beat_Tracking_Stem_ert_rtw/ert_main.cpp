//===================================================================//
//   Beat Tracking Alogrithm                                         //
//   Implemented on Software for Microsoft® Windows®                 //
//                                                                   //
//   Team of Sharif University of Technology - IRAN                  //
//                                                                   //
//   IEEE Signal Processing Cup 2017 - Beat Tracking Challenge       //
//                                                                   //
//   Please read the associated documentation on the procedure of    //
//   building the source code into executable app package and also   //
//   the installation.                                               //
//===================================================================//
//Notice: This file is autogenerated from a Simulink model
//  Parts marked with !@! are altered to meet requirements of the
//  GUI app.

/*
 * File: ert_main.c
 *
 * Code generated for Simulink model 'Beat_Tracking_Stem'.
 *
 * Model version                  : 1.83
 * Simulink Coder version         : 8.10 (R2016a) 10-Feb-2016
 * C/C++ source code generated on : Mon Jan 02 19:30:47 2017
 *
 * Target selection: ert.tlc
 * Embedded hardware selection: Intel->x86-64 (Windows64)
 * Code generation objectives: Unspecified
 * Validation result: Not run
 */

#include <stddef.h>
#include <stdio.h>                     /* This ert_main.c example uses printf/fflush */
extern "C" //!@!
{
#include "Beat_Tracking_Stem.h"        /* Model's header file */
#include "rtwtypes.h"
#include "builtin_typeid_types.h"
#include "multiword_types.h"
}
//!@! #include "rt_logging.h"

#define QUOTE1(name)                   #name
#define QUOTE(name)                    QUOTE1(name)              // need to expand name
#ifndef SAVEFILE
# define MATFILE2(file)                #file ".mat"
# define MATFILE1(file)                MATFILE2(file)
# define MATFILE                       MATFILE1(MODEL)
#else
# define MATFILE                       QUOTE(SAVEFILE)
#endif


/*
 * Associating rt_OneStep with a real-time clock or interrupt service routine
 * is what makes the generated code "real-time".  The function rt_OneStep is
 * always associated with the base rate of the model.  Subrates are managed
 * by the base rate from inside the generated code.  Enabling/disabling
 * interrupts and floating point context switches are target specific.  This
 * example code indicates where these should take place relative to executing
 * the generated code step function.  Overrun behavior should be tailored to
 * your application needs.  This example simply sets an error status in the
 * real-time model and returns from rt_OneStep.
 */
void rt_OneStep(void);
void rt_OneStep(void)
{
  static boolean_T OverrunFlag = false;

  /* Disable interrupts here */

  /* Check for overrun */
  if (OverrunFlag) {
    rtmSetErrorStatus(Beat_Tracking_Stem_M, "Overrun");
    return;
  }

  OverrunFlag = true;

  /* Save FPU context here (if necessary) */
  /* Re-enable timer or interrupt here */
  /* Set model inputs here */

  /* Step the model for base rate */
  Beat_Tracking_Stem_step();

  /* Get model outputs here */

  /* Indicate task complete */
  OverrunFlag = false;

  /* Disable interrupts here */
  /* Restore FPU context here (if necessary) */
  /* Enable interrupts here */
}

/*
 * The example "main" function illustrates what is required by your
 * application code to initialize, execute, and terminate the generated code.
 * Attaching rt_OneStep to a real-time clock is target specific.  This example
 * illustrates how you do this relative to initializing the model.
 */
//!@!int_T main(int_T argc, const char *argv[])
int_T BeatTrackingMain()
{
  //!@! Initialize the Audio subsystem
  BT_Audio_Init();
    
  /* Initialize model */
  Beat_Tracking_Stem_initialize();

  /* The MAT-file logging option selected; therefore, simulating
   * the model step behavior (in non real-time).  Running this
   * code produces results that can be loaded into MATLAB.
   */
  while ((rtmGetErrorStatus(Beat_Tracking_Stem_M) == (NULL)) &&
         !rtmGetStopRequested(Beat_Tracking_Stem_M)) {

    //!@!
    if (BT_Audio_RestartRequired())
    {
        //Audio restart is planned. Terminate and reininitailize the model.
        Beat_Tracking_Stem_terminate();
        BT_Audio_Init();
        Beat_Tracking_Stem_initialize();
    }
    else if (BT_Audio_NoMoreAudio())
    {
        //Do not step DSP.
        BT_Idleness();
    }
    else
    {
        //One step DSP.
        rt_OneStep();
    }
  }

  /* Matfile logging */
  rt_StopDataLogging(MATFILE, Beat_Tracking_Stem_M->rtwLogInfo);

  /* Disable rt_OneStep() here */

  /* Terminate model */
  Beat_Tracking_Stem_terminate();
  return 0;
}

/*
 * File trailer for generated code.
 *
 * [EOF]
 */
